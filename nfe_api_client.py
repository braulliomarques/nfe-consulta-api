#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Cliente Python para a API de Consulta e Download de NFe
Permite fazer requisi√ß√µes para interceptar a URL de download de uma NFe
"""

import requests
import sys
import json
import argparse

def interceptar_url_nfe(chave_nfe, host="localhost", port=3002):
    """
    Faz uma requisi√ß√£o para a API para interceptar a URL de download de uma NFe
    
    Args:
        chave_nfe (str): Chave de acesso da NFe (44 d√≠gitos)
        host (str): Host da API (padr√£o: localhost)
        port (int): Porta da API (padr√£o: 3002)
    
    Returns:
        dict: Resposta da API em formato de dicion√°rio
    """
    url = f"http://{host}:{port}/api/nfe/interceptar-url/{chave_nfe}"
    
    print(f"Consultando API NFe: {url}")
    
    try:
        # Fazer a requisi√ß√£o para a API
        response = requests.get(url, timeout=180)  # Timeout de 3 minutos (mesmo da API)
        
        # Verificar se a requisi√ß√£o foi bem-sucedida
        response.raise_for_status()
        
        # Retornar os dados da resposta
        return response.json()
    
    except requests.exceptions.HTTPError as err:
        print(f"Erro HTTP: {err}")
        if response.text:
            try:
                print(f"Detalhes: {json.dumps(response.json(), indent=2)}")
            except:
                print(f"Resposta: {response.text}")
        return None
    
    except requests.exceptions.ConnectionError:
        print(f"Erro de conex√£o: N√£o foi poss√≠vel conectar a {url}")
        print("Verifique se o servidor da API est√° rodando.")
        return None
    
    except requests.exceptions.Timeout:
        print("Erro: Timeout na requisi√ß√£o")
        print("A opera√ß√£o pode levar algum tempo devido √† resolu√ß√£o de captcha.")
        return None
    
    except requests.exceptions.RequestException as err:
        print(f"Erro na requisi√ß√£o: {err}")
        return None

def main():
    """Fun√ß√£o principal do script"""
    # Configurar o parser de argumentos
    parser = argparse.ArgumentParser(description='Cliente Python para a API de NFe')
    parser.add_argument('chave', nargs='?', 
                      help='Chave de acesso da NFe (44 d√≠gitos)')
    parser.add_argument('--host', default='localhost',
                      help='Host da API (padr√£o: localhost)')
    parser.add_argument('--port', type=int, default=3002,
                      help='Porta da API (padr√£o: 3002)')
    
    args = parser.parse_args()
    
    # Se n√£o foi fornecida uma chave, usar uma chave de exemplo
    if not args.chave:
        args.chave = '51250209608375000103550010000047181000141540'
        print(f"Nenhuma chave fornecida. Usando chave de exemplo: {args.chave}")
    
    # Validar a chave (deve ter 44 d√≠gitos)
    if not args.chave.isdigit() or len(args.chave) != 44:
        print("Erro: A chave deve conter 44 d√≠gitos num√©ricos.")
        sys.exit(1)
    
    # Fazer a requisi√ß√£o
    print("\n========================================")
    print("Cliente Python para API de NFe")
    print("========================================")
    print(f"Chave NFe: {args.chave}")
    print(f"Servidor: http://{args.host}:{args.port}")
    print("\nIniciando requisi√ß√£o...\n")
    
    resultado = interceptar_url_nfe(args.chave, args.host, args.port)
    
    if resultado:
        print("\n‚úÖ SUCESSO:")
        print(json.dumps(resultado, indent=2))
        
        if resultado.get('url'):
            print(f"\nüìã URL interceptada com sucesso!")
            print(f"\nURL: {resultado['url']}")
    else:
        print("\n‚ùå A requisi√ß√£o falhou.")

if __name__ == "__main__":
    main() 